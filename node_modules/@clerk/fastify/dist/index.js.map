{"version":3,"sources":["../src/index.ts","../src/clerkPlugin.ts","../src/types.ts","../src/withClerkMiddleware.ts","../src/clerkClient.ts","../src/constants.ts","../src/utils.ts","../src/errors.ts","../src/getAuth.ts"],"sourcesContent":["export * from '@clerk/backend';\n\nexport type { ClerkFastifyOptions } from './types';\n\nexport { clerkPlugin } from './clerkPlugin';\nexport { getAuth } from './getAuth';\nexport { clerkClient } from './clerkClient';\n","import type { FastifyInstance, FastifyPluginCallback } from 'fastify';\nimport fp from 'fastify-plugin';\n\nimport type { ClerkFastifyOptions } from './types';\nimport { ALLOWED_HOOKS } from './types';\nimport { withClerkMiddleware } from './withClerkMiddleware';\n\nconst plugin: FastifyPluginCallback<ClerkFastifyOptions> = (\n  instance: FastifyInstance,\n  opts: ClerkFastifyOptions,\n  done,\n) => {\n  instance.decorateRequest('auth', null);\n  // run clerk as a middleware to all scoped routes\n  const hookName = opts.hookName || 'preHandler';\n  if (!ALLOWED_HOOKS.includes(hookName)) {\n    throw new Error(`Unsupported hookName: ${hookName}`);\n  }\n\n  instance.addHook(hookName, withClerkMiddleware(opts));\n\n  done();\n};\n\nexport const clerkPlugin = fp(plugin, {\n  name: '@clerk/fastify',\n  fastify: '5.x',\n});\n","import type { ClerkOptions } from '@clerk/backend';\n\nexport const ALLOWED_HOOKS = ['onRequest', 'preHandler'] as const;\n\nexport type ClerkFastifyOptions = ClerkOptions & {\n  hookName?: (typeof ALLOWED_HOOKS)[number];\n};\n","import { AuthStatus } from '@clerk/backend/internal';\nimport type { FastifyReply, FastifyRequest } from 'fastify';\n\nimport { clerkClient } from './clerkClient';\nimport * as constants from './constants';\nimport type { ClerkFastifyOptions } from './types';\nimport { fastifyRequestToRequest } from './utils';\n\nexport const withClerkMiddleware = (options: ClerkFastifyOptions) => {\n  return async (fastifyRequest: FastifyRequest, reply: FastifyReply) => {\n    const req = fastifyRequestToRequest(fastifyRequest);\n\n    const requestState = await clerkClient.authenticateRequest(req, {\n      ...options,\n      secretKey: options.secretKey || constants.SECRET_KEY,\n      publishableKey: options.publishableKey || constants.PUBLISHABLE_KEY,\n    });\n\n    requestState.headers.forEach((value, key) => reply.header(key, value));\n\n    const locationHeader = requestState.headers.get(constants.Headers.Location);\n    if (locationHeader) {\n      return reply.code(307).send();\n    } else if (requestState.status === AuthStatus.Handshake) {\n      throw new Error('Clerk: handshake status without redirect');\n    }\n\n    // @ts-expect-error Inject auth so getAuth can read it\n    fastifyRequest.auth = requestState.toAuth();\n  };\n};\n","import { createClerkClient } from '@clerk/backend';\n\nimport { API_URL, API_VERSION, JWT_KEY, SDK_METADATA, SECRET_KEY } from './constants';\n\nexport const clerkClient = createClerkClient({\n  secretKey: SECRET_KEY,\n  apiUrl: API_URL,\n  apiVersion: API_VERSION,\n  jwtKey: JWT_KEY,\n  userAgent: `${PACKAGE_NAME}@${PACKAGE_VERSION}`,\n  sdkMetadata: SDK_METADATA,\n});\n","import { constants } from '@clerk/backend/internal';\nimport { apiUrlFromPublishableKey } from '@clerk/shared/apiUrlFromPublishableKey';\n\nexport const API_VERSION = process.env.CLERK_API_VERSION || 'v1';\nexport const SECRET_KEY = process.env.CLERK_SECRET_KEY || '';\nexport const PUBLISHABLE_KEY = process.env.CLERK_PUBLISHABLE_KEY || '';\nexport const API_URL = process.env.CLERK_API_URL || apiUrlFromPublishableKey(PUBLISHABLE_KEY);\nexport const JWT_KEY = process.env.CLERK_JWT_KEY || '';\nexport const SDK_METADATA = {\n  name: PACKAGE_NAME,\n  version: PACKAGE_VERSION,\n  environment: process.env.NODE_ENV,\n};\n\nexport const { Cookies, Headers } = constants;\n","import type { FastifyRequest } from 'fastify';\n\nexport const fastifyRequestToRequest = (req: FastifyRequest): Request => {\n  const headers = new Headers(\n    Object.keys(req.headers).reduce((acc, key) => {\n      const value = req.headers[key];\n      if (!value) {\n        return acc;\n      }\n\n      if (typeof value === 'string') {\n        acc.set(key, value);\n      } else {\n        acc.set(key, value.join(','));\n      }\n      return acc;\n    }, new Headers()),\n  );\n\n  // Making some manual tests it seems that FastifyRequest populates the req protocol / hostname\n  // based on the forwarded headers. Nevertheless, we are gonna use a dummy base and the request\n  // will be fixed by the internals of the clerk/backend package\n  const dummyOriginReqUrl = new URL(req.url || '', `${req.protocol}://clerk-dummy`);\n  return new Request(dummyOriginReqUrl, {\n    method: req.method,\n    headers,\n  });\n};\n","// https://github.com/clerk/javascript/blob/main/packages/remix/src/errors.ts#L1-L0\nconst createErrorMessage = (msg: string) => {\n  return `ðŸ”’ Clerk: ${msg.trim()}\n\nFor more info, check out the docs: https://clerk.com/docs,\nor come say hi in our discord server: https://clerk.com/discord\n`;\n};\n\nexport const pluginRegistrationRequired =\n  createErrorMessage(`The \"clerkPlugin\" should be registered before using the \"getAuth\".\nExample:\n\nimport { clerkPlugin } from '@clerk/fastify';\n\nconst server: FastifyInstance = Fastify({ logger: true });\nserver.register(clerkPlugin);\n`);\n","import type { AuthObject } from '@clerk/backend';\nimport type { FastifyRequest } from 'fastify';\n\nimport { pluginRegistrationRequired } from './errors';\n\ntype FastifyRequestWithAuth = FastifyRequest & { auth: AuthObject };\n\nexport const getAuth = (req: FastifyRequest): AuthObject => {\n  const authReq = req as FastifyRequestWithAuth;\n\n  if (!authReq.auth) {\n    throw new Error(pluginRegistrationRequired);\n  }\n\n  return authReq.auth;\n};\n"],"mappings":"wmBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,iBAAAE,EAAA,gBAAAC,EAAA,YAAAC,IAAA,eAAAC,EAAAL,GAAAM,EAAAN,EAAc,0BAAd,gBCCA,IAAAO,EAAe,6BCCR,IAAMC,EAAgB,CAAC,YAAa,YAAY,ECFvD,IAAAC,EAA2B,mCCA3B,IAAAC,EAAkC,0BCAlC,IAAAC,EAA0B,mCAC1BC,EAAyC,kDAE5BC,EAAc,QAAQ,IAAI,mBAAqB,KAC/CC,EAAa,QAAQ,IAAI,kBAAoB,GAC7CC,EAAkB,QAAQ,IAAI,uBAAyB,GACvDC,EAAU,QAAQ,IAAI,kBAAiB,4BAAyBD,CAAe,EAC/EE,EAAU,QAAQ,IAAI,eAAiB,GACvCC,EAAe,CAC1B,KAAM,iBACN,QAAS,SACT,YAAa,YACf,EAEa,CAAE,QAAAC,EAAS,QAAAC,CAAQ,EAAI,YDV7B,IAAMC,KAAc,qBAAkB,CAC3C,UAAWC,EACX,OAAQC,EACR,WAAYC,EACZ,OAAQC,EACR,UAAW,wBACX,YAAaC,CACf,CAAC,EETM,IAAMC,EAA2BC,GAAiC,CACvE,IAAMC,EAAU,IAAI,QAClB,OAAO,KAAKD,EAAI,OAAO,EAAE,OAAO,CAACE,EAAKC,IAAQ,CAC5C,IAAMC,EAAQJ,EAAI,QAAQG,CAAG,EAC7B,OAAKC,IAID,OAAOA,GAAU,SACnBF,EAAI,IAAIC,EAAKC,CAAK,EAElBF,EAAI,IAAIC,EAAKC,EAAM,KAAK,GAAG,CAAC,GAEvBF,CACT,EAAG,IAAI,OAAS,CAClB,EAKMG,EAAoB,IAAI,IAAIL,EAAI,KAAO,GAAI,GAAGA,EAAI,QAAQ,gBAAgB,EAChF,OAAO,IAAI,QAAQK,EAAmB,CACpC,OAAQL,EAAI,OACZ,QAAAC,CACF,CAAC,CACH,EHnBO,IAAMK,EAAuBC,GAC3B,MAAOC,EAAgCC,IAAwB,CACpE,IAAMC,EAAMC,EAAwBH,CAAc,EAE5CI,EAAe,MAAMC,EAAY,oBAAoBH,EAAK,CAC9D,GAAGH,EACH,UAAWA,EAAQ,WAAuBO,EAC1C,eAAgBP,EAAQ,gBAA4BQ,CACtD,CAAC,EAKD,GAHAH,EAAa,QAAQ,QAAQ,CAACI,EAAOC,IAAQR,EAAM,OAAOQ,EAAKD,CAAK,CAAC,EAE9CJ,EAAa,QAAQ,IAAcM,EAAQ,QAAQ,EAExE,OAAOT,EAAM,KAAK,GAAG,EAAE,KAAK,EACvB,GAAIG,EAAa,SAAW,aAAW,UAC5C,MAAM,IAAI,MAAM,0CAA0C,EAI5DJ,EAAe,KAAOI,EAAa,OAAO,CAC5C,EFtBF,IAAMO,EAAqD,CACzDC,EACAC,EACAC,IACG,CACHF,EAAS,gBAAgB,OAAQ,IAAI,EAErC,IAAMG,EAAWF,EAAK,UAAY,aAClC,GAAI,CAACG,EAAc,SAASD,CAAQ,EAClC,MAAM,IAAI,MAAM,yBAAyBA,CAAQ,EAAE,EAGrDH,EAAS,QAAQG,EAAUE,EAAoBJ,CAAI,CAAC,EAEpDC,EAAK,CACP,EAEaI,KAAc,EAAAC,SAAGR,EAAQ,CACpC,KAAM,iBACN,QAAS,KACX,CAAC,EM1BD,IAAMS,EAAsBC,GACnB,oBAAaA,EAAI,KAAK,CAAC;AAAA;AAAA;AAAA;AAAA,EAOnBC,EACXF,EAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAOpB,ECVM,IAAMG,EAAWC,GAAoC,CAC1D,IAAMC,EAAUD,EAEhB,GAAI,CAACC,EAAQ,KACX,MAAM,IAAI,MAAMC,CAA0B,EAG5C,OAAOD,EAAQ,IACjB","names":["index_exports","__export","clerkClient","clerkPlugin","getAuth","__toCommonJS","__reExport","import_fastify_plugin","ALLOWED_HOOKS","import_internal","import_backend","import_internal","import_apiUrlFromPublishableKey","API_VERSION","SECRET_KEY","PUBLISHABLE_KEY","API_URL","JWT_KEY","SDK_METADATA","Cookies","Headers","clerkClient","SECRET_KEY","API_URL","API_VERSION","JWT_KEY","SDK_METADATA","fastifyRequestToRequest","req","headers","acc","key","value","dummyOriginReqUrl","withClerkMiddleware","options","fastifyRequest","reply","req","fastifyRequestToRequest","requestState","clerkClient","SECRET_KEY","PUBLISHABLE_KEY","value","key","Headers","plugin","instance","opts","done","hookName","ALLOWED_HOOKS","withClerkMiddleware","clerkPlugin","fp","createErrorMessage","msg","pluginRegistrationRequired","getAuth","req","authReq","pluginRegistrationRequired"]}