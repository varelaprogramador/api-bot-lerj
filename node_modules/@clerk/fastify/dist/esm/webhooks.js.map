{"version":3,"sources":["../../src/webhooks.ts"],"sourcesContent":["/* eslint-disable import/export */\nimport type { VerifyWebhookOptions } from '@clerk/backend/webhooks';\nimport { verifyWebhook as verifyWebhookBase } from '@clerk/backend/webhooks';\nimport type { FastifyRequest } from 'fastify';\n\nimport { fastifyRequestToRequest } from './utils';\n\n// Ordering of exports matter here since\n// we're overriding the base verifyWebhook\nexport * from '@clerk/backend/webhooks';\n\n/**\n * Verifies the authenticity of a webhook request using Svix.\n *\n * @param req - The incoming webhook Fastify Request object\n * @param options - Optional configuration object\n * @param options.signingSecret - Custom signing secret. If not provided, falls back to CLERK_WEBHOOK_SIGNING_SECRET env variable\n * @throws Will throw an error if the webhook signature verification fails\n * @returns A promise that resolves to the verified webhook event data\n *\n * @see {@link https://clerk.com/docs/webhooks/sync-data} to learn more about syncing Clerk data to your application using webhooks\n */\nexport async function verifyWebhook(req: FastifyRequest, options?: VerifyWebhookOptions) {\n  const webRequest = fastifyRequestToRequest(req);\n  // Cloning instead of implementing the body inside fastifyRequestToRequest\n  // to make it more predictable\n  const clonedRequest = new Request(webRequest, {\n    body: JSON.stringify(req.body),\n  });\n  return verifyWebhookBase(clonedRequest, options);\n}\n"],"mappings":"wCAEA,OAAS,iBAAiBA,MAAyB,0BAOnD,WAAc,0BAad,eAAsBC,EAAcC,EAAqBC,EAAgC,CACvF,IAAMC,EAAaC,EAAwBH,CAAG,EAGxCI,EAAgB,IAAI,QAAQF,EAAY,CAC5C,KAAM,KAAK,UAAUF,EAAI,IAAI,CAC/B,CAAC,EACD,OAAOK,EAAkBD,EAAeH,CAAO,CACjD","names":["verifyWebhookBase","verifyWebhook","req","options","webRequest","fastifyRequestToRequest","clonedRequest","verifyWebhookBase"]}