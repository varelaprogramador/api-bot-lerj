{"version":3,"sources":["../src/webhooks.ts","../src/utils.ts"],"sourcesContent":["/* eslint-disable import/export */\nimport type { VerifyWebhookOptions } from '@clerk/backend/webhooks';\nimport { verifyWebhook as verifyWebhookBase } from '@clerk/backend/webhooks';\nimport type { FastifyRequest } from 'fastify';\n\nimport { fastifyRequestToRequest } from './utils';\n\n// Ordering of exports matter here since\n// we're overriding the base verifyWebhook\nexport * from '@clerk/backend/webhooks';\n\n/**\n * Verifies the authenticity of a webhook request using Svix.\n *\n * @param req - The incoming webhook Fastify Request object\n * @param options - Optional configuration object\n * @param options.signingSecret - Custom signing secret. If not provided, falls back to CLERK_WEBHOOK_SIGNING_SECRET env variable\n * @throws Will throw an error if the webhook signature verification fails\n * @returns A promise that resolves to the verified webhook event data\n *\n * @see {@link https://clerk.com/docs/webhooks/sync-data} to learn more about syncing Clerk data to your application using webhooks\n */\nexport async function verifyWebhook(req: FastifyRequest, options?: VerifyWebhookOptions) {\n  const webRequest = fastifyRequestToRequest(req);\n  // Cloning instead of implementing the body inside fastifyRequestToRequest\n  // to make it more predictable\n  const clonedRequest = new Request(webRequest, {\n    body: JSON.stringify(req.body),\n  });\n  return verifyWebhookBase(clonedRequest, options);\n}\n","import type { FastifyRequest } from 'fastify';\n\nexport const fastifyRequestToRequest = (req: FastifyRequest): Request => {\n  const headers = new Headers(\n    Object.keys(req.headers).reduce((acc, key) => {\n      const value = req.headers[key];\n      if (!value) {\n        return acc;\n      }\n\n      if (typeof value === 'string') {\n        acc.set(key, value);\n      } else {\n        acc.set(key, value.join(','));\n      }\n      return acc;\n    }, new Headers()),\n  );\n\n  // Making some manual tests it seems that FastifyRequest populates the req protocol / hostname\n  // based on the forwarded headers. Nevertheless, we are gonna use a dummy base and the request\n  // will be fixed by the internals of the clerk/backend package\n  const dummyOriginReqUrl = new URL(req.url || '', `${req.protocol}://clerk-dummy`);\n  return new Request(dummyOriginReqUrl, {\n    method: req.method,\n    headers,\n  });\n};\n"],"mappings":"2dAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,mBAAAE,IAAA,eAAAC,EAAAH,GAEA,IAAAI,EAAmD,mCCA5C,IAAMC,EAA2BC,GAAiC,CACvE,IAAMC,EAAU,IAAI,QAClB,OAAO,KAAKD,EAAI,OAAO,EAAE,OAAO,CAACE,EAAKC,IAAQ,CAC5C,IAAMC,EAAQJ,EAAI,QAAQG,CAAG,EAC7B,OAAKC,IAID,OAAOA,GAAU,SACnBF,EAAI,IAAIC,EAAKC,CAAK,EAElBF,EAAI,IAAIC,EAAKC,EAAM,KAAK,GAAG,CAAC,GAEvBF,CACT,EAAG,IAAI,OAAS,CAClB,EAKMG,EAAoB,IAAI,IAAIL,EAAI,KAAO,GAAI,GAAGA,EAAI,QAAQ,gBAAgB,EAChF,OAAO,IAAI,QAAQK,EAAmB,CACpC,OAAQL,EAAI,OACZ,QAAAC,CACF,CAAC,CACH,EDlBAK,EAAAC,EAAc,mCATd,gBAsBA,eAAsBC,EAAcC,EAAqBC,EAAgC,CACvF,IAAMC,EAAaC,EAAwBH,CAAG,EAGxCI,EAAgB,IAAI,QAAQF,EAAY,CAC5C,KAAM,KAAK,UAAUF,EAAI,IAAI,CAC/B,CAAC,EACD,SAAO,EAAAK,eAAkBD,EAAeH,CAAO,CACjD","names":["webhooks_exports","__export","verifyWebhook","__toCommonJS","import_webhooks","fastifyRequestToRequest","req","headers","acc","key","value","dummyOriginReqUrl","__reExport","webhooks_exports","verifyWebhook","req","options","webRequest","fastifyRequestToRequest","clonedRequest","verifyWebhookBase"]}